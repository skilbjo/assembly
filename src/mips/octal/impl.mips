.text

# octal_convert must:
# - be named octal_convert and declared as global
# - read input address of string from a0
# - follow the convention of using the t0-9 registers for temporary storage
# - (if it uses s0-7 then it is responsible for pushing existing values to the stack then popping them back off before returning)
# - write integer result to v0
#
# '1735263' should return '506547'
# '10' should return 8
# 8 in binary is 1000
# 2^3 = 8, 2^2 = 4 , 2^1 = 2 , 2^0 = 0

.globl octal_convert

octal_convert:
        move $t0, $a0       # $t0 now has address of string
        li $v0, 0           # reset accumulator

decode:
        lb $t1, 0($t0)      # load first byte of input
        beq $t1,$zero,exit
        addi $t0, $t0, 1    # increment pointer
        sub $t1, $t1, 48    # ascii 0 = binary 48. subtract into $t2
        j accumulate
decode_end:
        j decode

accumulate:
        sll $v0, $v0, 3     # increase accumulator by 2^n
        add $v0, $v0, $t1   # add $t1 to accumulator
 j decode_end

exit:
        jr $ra

#octal_convert:
        #move $t0, $a0       # $t0 now has address of string
        #li $v0, 0           # reset accumulator

#decode:
        #lb $t1, 0($t0)      # load first byte of input
        #beq $t1,$zero,exit
        #addi $t0, $t0, 1    # increment pointer
        #sub $t1, $t1, 48    # ascii 0 = binary 48. subtract into $t2
        #j accumulate
#decode_end:
        #j decode

#accumulate:
        ##addi $t2, $zero, 0  # clear $t2
        ##addi $t2, $zero,
        #beq $v0, $zero, accumulate_end
        #addi $v0, $v0, 8
        ##mul $t1, $t1, 8
#accumulate_end:
        #add $v0, $v0, $t1   # add $t1 to accumulator
        #j decode_end

##accumulate:
        ##sll $v0, $v0, 3     # increase accumulator by 2^n
        ##add $v0, $v0, $t1   # add $t1 to accumulator
        ##j decode_end

#exit:
        #jr $ra
