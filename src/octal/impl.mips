.text

# octal_convert must:
# - be named octal_convert and declared as global
# - read input address of string from a0
# - follow the convention of using the t0-9 registers for temporary storage
# - (if it uses s0-7 then it is responsible for pushing existing values to the stack then popping them back off before returning)
# - write integer result to v0
#
# '1735263' should return '506547'
# '10' should return 8

.globl octal_convert

octal_convert:
        move $t0, $a0           # $t0 now has address of string
        li $v0, 0               # reset accumulator

loop:
        lb $t1, 0($t0)          # load first byte of input
        beq $t1,$zero,exit
        sll $v0, $v0, 1         # increase accumulator by 2^n
        sub $t2, $t1, 48        # ascii 0 = binary 48. subtract into $t2
        add $v0, $v0, $t2       # add $t2 to accumulator
        addi $t0, $t0, 1        # increment pointer
        j loop

#decode:
#        lb $t1, 0($t0)          # load first byte of input
#        beq $t1,$zero,exit
#        sub $t2, $t1, 48        # ascii 0 = binary 48. subtract into $t2
#        j accumulate
#        addi $t0, $t0, 1        # increment pointer
#decode_end:
#        j decode

#accumulate:
#        sll $v0, $v0, 1         # increase accumulator by 2^n
        #mul $t2, $t2, 8
 #       add $v0, $v0, $t2       # add $t2 to accumulator
#	j decode_end

exit:
        jr $ra
