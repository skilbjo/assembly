.text

# binary_convert must:
# - be named binary_convert and declared as global
# - read input address of string from a0
# - follow the convention of using the t0-9 registers for temporary storage
# - (if it uses s0-7 then it is responsible for pushing existing values to the
# stack then popping them back off before returning)
# - write integer result to v0

.globl binary_convert

binary_convert:
        move $t0, $a0

loop:
        lb $t1, 0($t0)            # load first byte of input

check:
        beq $t1, 48, good
        beq $t1, 49, good
        beq $t1, $0, end

good:
        sll $t2, $t2, 1
        beq $t1, 48, end
        addiu $t2, $t2, 1

end:
        addiu $t0, $t0, 1
        j loop

exit:
        move $v0, $t9
        jr $ra

#binary_convert:
        #addu    $v0, $zero, $zero
        #addu    $t2, $zero, $s1

#loop:
        #lb      $t3, 0($t2)        # load first byte of input
        #beq     $t3, $zero, end    # if reached null character end
        #addi    $t2, $t2, 1        # increment input string pointer for next interation
        #subi    $t3, $t3, 0x30     # subtract the ascii digit for '0'(0x30)
                                   ## or '1'(0x31) from 0x30 so we can just add $t1 after shifting
        #sll     $v0, $v0, 1
        #addu    $v0, $v0, $t3
        #j loop

#end:
       #jr $ra

binary_convert_my_crappy_implementation:
        lw      $t0,0($a0)         # load data from a0 into t1
        li      $t1,1000000        # mask for binary 2^7
        and     $t9,$t9,$t1        # subtotal
        li      $t1,0100000        # mask for binary 2^6
        and     $t9,$t9,$t1        # subtotal
        li      $t1,0010000        # mask for binary 2^5
        and     $t9,$t9,$t1        # subtotal
        li      $t1,0001000        # mask for binary 2^4
        and     $t9,$t9,$t1        # subtotal
        li      $t1,0000100        # mask for binary 2^3
        and     $t9,$t9,$t1        # subtotal
        li      $t1,0000010        # mask for binary 2^2
        and     $t9,$t9,$t1        # subtotal
        li      $t1,0000001        # mask for binary 2^2
        and     $t9,$t9,$t1        # subtotal
        sll     $s0,$t9,0          # final answer - from s into v
        #sw      $t9,0($s7)         # put final temp var into s register
        sll     $v0,$v0,1          # final answer - from s into v
        addu    $v0,$v0,$t3        # final answer - from s into v
        #sw      $s7,0($v0)         # final answer - from s into v



